AWSTemplateFormatVersion: "2010-09-09"
Description: "My Final project"

Parameters:
  MyInstance:
    Description: "this is my ins"
    Type: String
    Default: "Aikan"

  VPCCIDR:
    Type: String
    Default: "10.0.0.0/16"
    Description: "CIDR block for the VPC"
    
  InstanceTypeParameter:
    Type: String
    Default: "t2.micro"
    AllowedValues:
      - "t2.micro"
      - "t3.micro"

Mappings:
  AMIMappings:
    us-east-1:
      AmiId: "ami-0c101f26f147fa7fd"
    us-west-2:
      AmiId: "ami-0a70b9d193ae8a799"

Resources:
  MyKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyFormat: pem
      KeyName: key122
      KeyType: rsa
      Tags:
        - Key: Owner
          Value: !Ref MyInstance

  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      Tags:
       - Key: Owner
         Value: !Ref MyInstance

  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Owner
          Value: !Ref MyInstance

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: "us-east-1a"
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: true
      Tags:
       - Key: Owner
         Value: !Ref MyInstance

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: "us-east-1b"
      CidrBlock: "10.0.2.0/24"
      MapPublicIpOnLaunch: true
      Tags:
       - Key: Owner
         Value: !Ref MyInstance

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Ref MyInstance
      GroupDescription: "Allow SSH and HTTP access to developers"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: "0.0.0.0/0"
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      Tags: 
        - Key: Owner
          Value: !Ref MyInstance

  MyLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: MyLaunchTemplate
      LaunchTemplateData:
        InstanceType: !Ref InstanceTypeParameter
        ImageId: !FindInMap [AMIMappings, !Ref "AWS::Region", AmiId]
        KeyName: !Ref MyKeyPair
        SecurityGroupIds:
          - !GetAtt MySecurityGroup.GroupId
        UserData: 
          Fn::Base64: |
            #!/bin/bash
            yum install httpd -y 
            systemctl enable httpd
            systemctl start httpd
            echo "<h1>Hello, My name is Aikan</h1>" > /var/www/html/index.html

  MyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing 
      IpAddressType: ipv4
      SecurityGroups:
        - !Ref MySecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      
  MyListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
     DefaultActions:
       - Type: forward
         TargetGroupArn: !Ref MyTargetGroup
     LoadBalancerArn: !Ref MyLoadBalancer
     Port: 80
     Protocol: "HTTP"

  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref MyVPC

  MyASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref MyLaunchTemplate
        Version: !GetAtt MyLaunchTemplate.LatestVersionNumber
      MaxSize: 3
      MinSize: 1
      DesiredCapacity: 2
      VPCZoneIdentifier: 
       - !Ref PublicSubnet1
       - !Ref PublicSubnet2
      TargetGroupARNs:
       - !Ref MyTargetGroup

Outputs:
  ALBEnpoint:
    Description: URL of the Application LB
    Value: !GetAtt MyLoadBalancer.DNSName

  
